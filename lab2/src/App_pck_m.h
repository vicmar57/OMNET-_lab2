//
// Generated file, do not edit! Created by nedtool 5.2 from App_pck.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __APP_PCK_M_H
#define __APP_PCK_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>App_pck.msg:3</tt> by nedtool.
 * <pre>
 * packet App_pck
 * {
 *     char data[];
 * }
 * </pre>
 */
class App_pck : public ::omnetpp::cPacket
{
  protected:
    char *data; // array ptr
    unsigned int data_arraysize;

  private:
    void copy(const App_pck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const App_pck&);

  public:
    App_pck(const char *name=nullptr, short kind=0);
    App_pck(const App_pck& other);
    virtual ~App_pck();
    App_pck& operator=(const App_pck& other);
    virtual App_pck *dup() const override {return new App_pck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setDataArraySize(unsigned int size);
    virtual unsigned int getDataArraySize() const;
    virtual char getData(unsigned int k) const;
    virtual void setData(unsigned int k, char data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const App_pck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, App_pck& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>App_pck.msg:7</tt> by nedtool.
 * <pre>
 * packet IP_pck
 * {
 *     int destIp;
 *     int srcIP;
 *     short reserved1;
 *     short length;
 *     short id;
 *     short fregOffset;
 *     char TTL;
 *     char protocol;
 *     short checksum;
 * }
 * </pre>
 */
class IP_pck : public ::omnetpp::cPacket
{
  protected:
    int destIp;
    int srcIP;
    short reserved1;
    short length;
    short id;
    short fregOffset;
    char TTL;
    char protocol;
    short checksum;

  private:
    void copy(const IP_pck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IP_pck&);

  public:
    IP_pck(const char *name=nullptr, short kind=0);
    IP_pck(const IP_pck& other);
    virtual ~IP_pck();
    IP_pck& operator=(const IP_pck& other);
    virtual IP_pck *dup() const override {return new IP_pck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getDestIp() const;
    virtual void setDestIp(int destIp);
    virtual int getSrcIP() const;
    virtual void setSrcIP(int srcIP);
    virtual short getReserved1() const;
    virtual void setReserved1(short reserved1);
    virtual short getLength() const;
    virtual void setLength(short length);
    virtual short getId() const;
    virtual void setId(short id);
    virtual short getFregOffset() const;
    virtual void setFregOffset(short fregOffset);
    virtual char getTTL() const;
    virtual void setTTL(char TTL);
    virtual char getProtocol() const;
    virtual void setProtocol(char protocol);
    virtual short getChecksum() const;
    virtual void setChecksum(short checksum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IP_pck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IP_pck& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>App_pck.msg:19</tt> by nedtool.
 * <pre>
 * packet Eth_pck
 * {
 *     string srcMac;
 *     string destMac;
 *     short length;
 * }
 * </pre>
 */
class Eth_pck : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string srcMac;
    ::omnetpp::opp_string destMac;
    short length;

  private:
    void copy(const Eth_pck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Eth_pck&);

  public:
    Eth_pck(const char *name=nullptr, short kind=0);
    Eth_pck(const Eth_pck& other);
    virtual ~Eth_pck();
    Eth_pck& operator=(const Eth_pck& other);
    virtual Eth_pck *dup() const override {return new Eth_pck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSrcMac() const;
    virtual void setSrcMac(const char * srcMac);
    virtual const char * getDestMac() const;
    virtual void setDestMac(const char * destMac);
    virtual short getLength() const;
    virtual void setLength(short length);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Eth_pck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Eth_pck& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>App_pck.msg:25</tt> by nedtool.
 * <pre>
 * packet ARP
 * {
 *     char type;
 *     string srcMac;
 *     string destMac;
 *     int srcIP;
 *     int destIP;
 * }
 * </pre>
 */
class ARP : public ::omnetpp::cPacket
{
  protected:
    char type;
    ::omnetpp::opp_string srcMac;
    ::omnetpp::opp_string destMac;
    int srcIP;
    int destIP;

  private:
    void copy(const ARP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ARP&);

  public:
    ARP(const char *name=nullptr, short kind=0);
    ARP(const ARP& other);
    virtual ~ARP();
    ARP& operator=(const ARP& other);
    virtual ARP *dup() const override {return new ARP(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual char getType() const;
    virtual void setType(char type);
    virtual const char * getSrcMac() const;
    virtual void setSrcMac(const char * srcMac);
    virtual const char * getDestMac() const;
    virtual void setDestMac(const char * destMac);
    virtual int getSrcIP() const;
    virtual void setSrcIP(int srcIP);
    virtual int getDestIP() const;
    virtual void setDestIP(int destIP);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ARP& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ARP& obj) {obj.parsimUnpack(b);}


#endif // ifndef __APP_PCK_M_H

